import uuid
import ignition.model.infrastructure as infrastructure_model
from ignition.service.framework import Service
from ignition.utils.propvaluemap import PropValueMap
from ignition.service.infrastructure import InfrastructureDriverCapability
from kubedriver.kubeobjects import ObjectConfigurationGroup, namehelper

class InfrastructureDriver(Service, InfrastructureDriverCapability):

    def __init__(self, deployment_location_translator, location_based_management, templating):
        self.deployment_location_translator = deployment_location_translator
        self.location_based_management = location_based_management
        self.templating = templating

    def __translate_location(self, deployment_location_dict):
        kube_location = self.deployment_location_translator.translate(deployment_location_dict)
        return kube_location

    def __build_manager(self, kube_location):
        return self.location_based_management.build_manager(kube_location)

    def __build_render_properties(self, system_properties, properties):
        render_props = {k:v for k,v in properties.items()}
        sys_props = {k:v for k,v in system_properties.items()}
        render_props['systemProperties'] = sys_props
        self.__add_additional_render_properties(render_props)
        return render_props

    def __add_additional_render_properties(self, render_props):
        system_properties = render_props['systemProperties']
        if 'resourceId' in system_properties:
            system_properties['resourceIdSd'] = namehelper.safe_subdomain_name(system_properties.get('resourceId'))
            system_properties['resourceIdSubdomain'] = namehelper.safe_subdomain_name(system_properties.get('resourceId'))
        if 'resourceName' in system_properties:
            system_properties['resourceNameSd'] = namehelper.safe_subdomain_name(system_properties.get('resourceName'))
            system_properties['resourceNameSubdomain'] = namehelper.safe_subdomain_name(system_properties.get('resourceName'))

    def __process_template_to_objects(self, template, system_properties, properties):
        render_props = self.__build_render_properties(system_properties, properties)
        obj_conf_doc = self.templating.render_template(template, render_props)
        return obj_conf_doc.read()

    def __build_object_group(self, system_properties, kube_objects):
        if 'resourceId' in system_properties and 'resourceName' in system_properties:
            identifier = '{0}.{1}'.format(system_properties.get('resourceName'), system_properties.get('resourceId'))
        else:
            identifier = str(uuid.uuid4())
        return ObjectConfigurationGroup(identifier, kube_objects)

    def create_infrastructure(self, template, template_type, system_properties, properties, deployment_location):
        """
        Initiates a request to create infrastructure based on a TOSCA template.
        This method should return immediate response of the request being accepted,
        the InfrastructureService will poll get_infrastructure_task on this driver to determine when the request has completed.

        :param str template: template of infrastructure to be created
        :param str template_type: type of template used i.e. TOSCA or Heat
        :param ignition.utils.propvaluemap.PropValueMap system_properties: properties generated by LM for this Resource: resourceId, resourceName, requestId, metricKey, resourceManagerId, deploymentLocation, resourceType
        :param ignition.utils.propvaluemap.PropValueMap properties: property values of the Resource
        :param dict deployment_location: the deployment location to deploy to
        :return: an ignition.model.infrastructure.CreateInfrastructureResponse

        :raises:
            ignition.service.infrastructure.InvalidInfrastructureTemplateError: if the Template is not valid
            ignition.service.infrastructure.TemporaryInfrastructureError: there is an issue handling this request at this time
            ignition.service.infrastructure.UnreachableDeploymentLocationError: the Deployment Location cannot be reached
            ignition.service.infrastructure.InfrastructureError: there was an error handling this request
        """
        kube_location = self.__translate_location(deployment_location)
        kube_manager = self.__build_manager(kube_location)
        kube_objects = self.__process_template_to_objects(template, system_properties, properties)
        object_group = self.__build_object_group(system_properties, kube_objects)
        kube_manager.create_object_group(object_group)
        ##TODO: request id
        request_id = str(uuid.uuid4())
        return infrastructure_model.CreateInfrastructureResponse(object_group.identifier, request_id)

    def get_infrastructure_task(self, infrastructure_id, request_id, deployment_location):
        """
        Get information about the infrastructure (created or deleted)

        :param str infrastructure_id: identifier of the infrastructure to check
        :param str request_id: identifier of the request to check
        :param dict deployment_location: the location the infrastructure was deployed to
        :return: an ignition.model.infrastructure.InfrastructureTask instance describing the status

        :raises:
            ignition.service.infrastructure.InfrastructureNotFoundError: if no infrastructure with the given infrastructure_id exists
            ignition.service.infrastructure.InfrastructureRequestNotFoundError: if no request with the given request_id exists
            ignition.service.infrastructure.UnreachableDeploymentLocationError: the Deployment Location cannot be reached
            ignition.service.infrastructure.TemporaryInfrastructureError: there is an issue handling this request at this time, an attempt should be made again at a later time
            ignition.service.infrastructure.InfrastructureError: there was an error handling this request
        """
        kube_location = self.__translate_location(deployment_location)
        kube_manager = self.__build_manager(kube_location)
        kube_manager.get_object_group_record(infrastructure_id)
        ##TODO: Currently create_infrastructure would have failed but there would be a record
        # but this method can do nothing but return complete until we track status on the record
        return infrastructure_model.InfrastructureTask(infrastructure_id, request_id, infrastructure_model.STATUS_COMPLETE)

    def delete_infrastructure(self, infrastructure_id, deployment_location):
        """
        Initiates a request to delete infrastructure previously created with the given infrastructure_id.
        This method should return immediate response of the request being accepted,
        the InfrastructureService will poll get_infrastructure_task on this driver to determine when the request has completed.

        :param str infrastructure_id: identifier of the infrastructure to be removed
        :param dict deployment_location: the location the infrastructure was deployed to
        :return: an ignition.model.infrastructure.DeleteInfrastructureResponse

        :raises:
            ignition.service.infrastructure.InfrastructureNotFoundError: if no infrastructure with the given infrastructure_id exists
            ignition.service.infrastructure.UnreachableDeploymentLocationError: the Deployment Location cannot be reached
            ignition.service.infrastructure.TemporaryInfrastructureError: there is an issue handling this request at this time, an attempt should be made again at a later time
            ignition.service.infrastructure.InfrastructureError: there was an error handling this request
        """
        kube_location = self.__translate_location(deployment_location)
        kube_manager = self.__build_manager(kube_location)
        kube_manager.delete_object_group(infrastructure_id)
        ##TODO: request id
        request_id = str(uuid.uuid4())
        return infrastructure_model.DeleteInfrastructureResponse(infrastructure_id, request_id)

    def find_infrastructure(self, template, template_type, instance_name, deployment_location):
        """
        Finds infrastructure instances that meet the requirements set out in the given TOSCA template, returning the desired output values from those instances

        :param str template: tosca template of infrastructure to be found
        :param str template_type: type of template used i.e. TOSCA or Heat
        :param str instance_name: name given as search criteria
        :param dict deployment_location: the deployment location to deploy to
        :return: an ignition.model.infrastructure.FindInfrastructureResponse

        :raises:
            ignition.service.infrastructure.InvalidInfrastructureTemplateError: if the Template is not valid
            ignition.service.infrastructure.UnreachableDeploymentLocationError: the Deployment Location cannot be reached
            ignition.service.infrastructure.TemporaryInfrastructureError: there is an issue handling this request at this time, an attempt should be made again at a later time
            ignition.service.infrastructure.InfrastructureError: there was an error handling this request
        """
        print("Finding some Infrastructure")
        supported = False
        if not supported:
            raise NotImplementedError('find_infrastructure not yet implemented')
        return infrastructure_model.FindInfrastructureResponse()