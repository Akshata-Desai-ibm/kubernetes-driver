import uuid
import base64
import tempfile
import tarfile
import yaml
import os
import datetime
import ignition.model.infrastructure as infrastructure_model
import ignition.model.failure as failure_model
from ignition.service.framework import Service
from ignition.service.infrastructure import InfrastructureDriverCapability
from kubedriver.kubegroup.records import RequestStates, RequestOperations

class InfrastructureDriver(Service, InfrastructureDriverCapability):

    def __init__(self, deployment_location_translator, infrastructure_converter, keg_manager):
        self.deployment_location_translator = deployment_location_translator
        self.infrastructure_converter = infrastructure_converter
        self.keg_manager = keg_manager

    def __translate_location(self, deployment_location_dict):
        kube_location = self.deployment_location_translator.translate(deployment_location_dict)
        return kube_location

    def create_infrastructure(self, template, template_type, system_properties, properties, deployment_location):
        """
        Initiates a request to create infrastructure based on a TOSCA template.
        This method should return immediate response of the request being accepted,
        the InfrastructureService will poll get_infrastructure_task on this driver to determine when the request has completed.

        :param str template: template of infrastructure to be created
        :param str template_type: type of template used i.e. TOSCA or Heat
        :param ignition.utils.propvaluemap.PropValueMap system_properties: properties generated by LM for this Resource: resourceId, resourceName, requestId, metricKey, resourceManagerId, deploymentLocation, resourceType
        :param ignition.utils.propvaluemap.PropValueMap properties: property values of the Resource
        :param dict deployment_location: the deployment location to deploy to
        :return: an ignition.model.infrastructure.CreateInfrastructureResponse

        :raises:
            ignition.service.infrastructure.InvalidInfrastructureTemplateError: if the Template is not valid
            ignition.service.infrastructure.TemporaryInfrastructureError: there is an issue handling this request at this time
            ignition.service.infrastructure.UnreachableDeploymentLocationError: the Deployment Location cannot be reached
            ignition.service.infrastructure.InfrastructureError: there was an error handling this request
        """
        kube_location = self.__translate_location(deployment_location)
        entity_group = self.infrastructure_converter.convert_to_entity_group(template, template_type, system_properties, properties, kube_location)
        request_id = self.keg_manager.create_group(kube_location, entity_group)
        return infrastructure_model.CreateInfrastructureResponse(entity_group.uid, request_id)

    def get_infrastructure_task(self, infrastructure_id, request_id, deployment_location):
        """
        Get information about the infrastructure (created or deleted)

        :param str infrastructure_id: identifier of the infrastructure to check
        :param str request_id: identifier of the request to check
        :param dict deployment_location: the location the infrastructure was deployed to
        :return: an ignition.model.infrastructure.InfrastructureTask instance describing the status

        :raises:
            ignition.service.infrastructure.InfrastructureNotFoundError: if no infrastructure with the given infrastructure_id exists
            ignition.service.infrastructure.InfrastructureRequestNotFoundError: if no request with the given request_id exists
            ignition.service.infrastructure.UnreachableDeploymentLocationError: the Deployment Location cannot be reached
            ignition.service.infrastructure.TemporaryInfrastructureError: there is an issue handling this request at this time, an attempt should be made again at a later time
            ignition.service.infrastructure.InfrastructureError: there was an error handling this request
        """
        kube_location = self.__translate_location(deployment_location)
        request_record = self.keg_manager.get_request_record(kube_location, infrastructure_id, request_id)
        task_status = infrastructure_model.STATUS_IN_PROGRESS
        failure_details = None
        if request_record.state == RequestStates.COMPLETE:
            task_status = infrastructure_model.STATUS_COMPLETE
            if request_record.operation == RequestOperations.DELETE:
                # Purge record of this Group after the Delete completes so we don't create a build up of zombie persistence records
                self.keg_manager.purge_group(kube_location, infrastructure_id)
        elif request_record.state == RequestStates.FAILED:
            task_status = infrastructure_model.STATUS_FAILED
            failure_details = failure_model.FailureDetails(failure_model.FAILURE_CODE_INTERNAL_ERROR, description=request_record.error)
        return infrastructure_model.InfrastructureTask(infrastructure_id, request_id, task_status, failure_details=failure_details, outputs={})

    def delete_infrastructure(self, infrastructure_id, deployment_location):
        """
        Initiates a request to delete infrastructure previously created with the given infrastructure_id.
        This method should return immediate response of the request being accepted,
        the InfrastructureService will poll get_infrastructure_task on this driver to determine when the request has completed.

        :param str infrastructure_id: identifier of the infrastructure to be removed
        :param dict deployment_location: the location the infrastructure was deployed to
        :return: an ignition.model.infrastructure.DeleteInfrastructureResponse

        :raises:
            ignition.service.infrastructure.InfrastructureNotFoundError: if no infrastructure with the given infrastructure_id exists
            ignition.service.infrastructure.UnreachableDeploymentLocationError: the Deployment Location cannot be reached
            ignition.service.infrastructure.TemporaryInfrastructureError: there is an issue handling this request at this time, an attempt should be made again at a later time
            ignition.service.infrastructure.InfrastructureError: there was an error handling this request
        """
        kube_location = self.__translate_location(deployment_location)
        request_id = self.keg_manager.delete_group(kube_location, infrastructure_id)
        return infrastructure_model.DeleteInfrastructureResponse(infrastructure_id, request_id)

    def find_infrastructure(self, template, template_type, instance_name, deployment_location):
        """
        Finds infrastructure instances that meet the requirements set out in the given TOSCA template, returning the desired output values from those instances

        :param str template: tosca template of infrastructure to be found
        :param str template_type: type of template used i.e. TOSCA or Heat
        :param str instance_name: name given as search criteria
        :param dict deployment_location: the deployment location to deploy to
        :return: an ignition.model.infrastructure.FindInfrastructureResponse

        :raises:
            ignition.service.infrastructure.InvalidInfrastructureTemplateError: if the Template is not valid
            ignition.service.infrastructure.UnreachableDeploymentLocationError: the Deployment Location cannot be reached
            ignition.service.infrastructure.TemporaryInfrastructureError: there is an issue handling this request at this time, an attempt should be made again at a later time
            ignition.service.infrastructure.InfrastructureError: there was an error handling this request
        """
        raise NotImplementedError('find_infrastructure not yet implemented')